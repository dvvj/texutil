package org.ditw.nameUtils.nameParser.utils

import java.util.regex.Pattern

/**
  * Created by dev on 2017-08-17.
  */
object Pinyin extends Serializable {
  private val _table =
    """
      |a
      |ba
      |pa
      |ma
      |fa
      |da
      |ta
      |na
      |la
      |ga
      |ka
      |ha
      |za
      |ca
      |cha
      |sa
      |sha
      |wa
      |ya
      |zha
      |
      |o
      |bo
      |po
      |mo
      |fo
      |
      |e
      |de
      |ge
      |ke
      |le
      |he
      |ze
      |ce
      |che
      |re
      |se
      |she
      |ye
      |zhe
      |
      |bi
      |pa
      |mi
      |di
      |ti
      |ni
      |li
      |ji
      |pi
      |qi
      |xi
      |zi
      |ci
      |chi
      |ri
      |si
      |shi
      |yi
      |zhi
      |
      |bu
      |pu
      |mu
      |fu
      |du
      |tu
      |nu
      |lu
      |gu
      |ku
      |hu
      |zu
      |cu
      |chu
      |ru
      |su
      |shu
      |zhu
      |ju
      |qu
      |wu
      |yu
      |xu
      |
      |ai
      |bai
      |cai
      |chai
      |dai
      |gai
      |hai
      |kai
      |lai
      |mai
      |nai
      |pai
      |sai
      |shai
      |tai
      |wai
      |zai
      |zhai
      |
      |ao
      |bao
      |pao
      |mao
      |dao
      |tao
      |nao
      |lao
      |gao
      |kao
      |hao
      |zao
      |cao
      |chao
      |rao
      |sao
      |shao
      |yao
      |zhao
      |
      |an
      |ban
      |pan
      |man
      |fan
      |dan
      |tan
      |nan
      |lan
      |gan
      |kan
      |han
      |zan
      |can
      |chan
      |ran
      |san
      |shan
      |wan
      |yan
      |zhan
      |
      |ang
      |bang
      |pang
      |mang
      |fang
      |dang
      |tang
      |nang
      |lang
      |gang
      |kang
      |hang
      |zang
      |cang
      |chang
      |rang
      |sang
      |shang
      |wang
      |yang
      |zhang
      |
      |ou
      |pou
      |mou
      |fou
      |dou
      |tou
      |nou
      |lou
      |gou
      |kou
      |hou
      |zou
      |cou
      |chou
      |rou
      |sou
      |shou
      |you
      |zhou
      |
      |dong
      |gong
      |kong
      |long
      |hong
      |zong
      |cong
      |chong
      |rong
      |song
      |tong
      |yong
      |zhong
      |
      |bei
      |pei
      |mei
      |fei
      |nei
      |lei
      |gei
      |hei
      |zei
      |wei
      |
      |er
      |
      |en
      |ben
      |pen
      |men
      |fen
      |den
      |nen
      |gen
      |ken
      |hen
      |wen
      |zen
      |cen
      |chen
      |sen
      |ren
      |shen
      |zhen
      |
      |eng
      |beng
      |peng
      |meng
      |feng
      |deng
      |teng
      |neng
      |leng
      |geng
      |keng
      |heng
      |zeng
      |ceng
      |cheng
      |reng
      |seng
      |sheng
      |weng
      |zheng
      |
      |miu
      |diu
      |niu
      |liu
      |jiu
      |qiu
      |xiu
      |
      |bie
      |pie
      |mie
      |die
      |tie
      |nie
      |lie
      |jie
      |qie
      |xie
      |
      |bin
      |pin
      |min
      |nin
      |lin
      |jin
      |qin
      |xin
      |yin
      |
      |bing
      |ping
      |ming
      |ding
      |ting
      |ning
      |ling
      |jing
      |qing
      |xing
      |ying
      |
      |dia
      |lia
      |jia
      |qia
      |xia
      |
      |biao
      |piao
      |miao
      |diao
      |tiao
      |niao
      |liao
      |jiao
      |qiao
      |xiao
      |
      |bian
      |pian
      |mian
      |dian
      |tian
      |nian
      |lian
      |jian
      |qian
      |xian
      |
      |niang
      |liang
      |jiang
      |qiang
      |xiang
      |
      |jiong
      |qiong
      |xiong
      |
      |dui
      |tui
      |gui
      |kui
      |hui
      |zui
      |cui
      |chui
      |rui
      |sui
      |shui
      |zhui
      |
      |dun
      |tun
      |nun
      |lun
      |gun
      |kun
      |hun
      |jun
      |qun
      |xun
      |zun
      |cun
      |chun
      |sun
      |shun
      |yun
      |zhun
      |
      |gua
      |kua
      |hua
      |zhua
      |
      |guai
      |kuai
      |huai
      |shuai
      |zhuai
      |
      |duan
      |tuan
      |nuan
      |luan
      |guan
      |kuan
      |huan
      |juan
      |quan
      |ruan
      |xuan
      |zuan
      |cuan
      |chuan
      |suan
      |shuan
      |yuan
      |zhuan
      |
      |guang
      |kuang
      |huang
      |chuang
      |shuang
      |zhuang
      |
      |duo
      |tuo
      |nuo
      |luo
      |guo
      |kuo
      |huo
      |zuo
      |ruo
      |cuo
      |chuo
      |suo
      |shuo
      |zhuo
      |
      |jue
      |que
      |xue
      |yue
      |
      |nve
      |lve
      |
      |nv
      |lv
      |
      |ouyang
      |linghu
      |huangfu
      |shangguan
      |situ
      |zhuge
      |sima
      |yuwen
      |huyan
      |duanmu
      |yuchi
      |xuanyuan
      |xiahou
    """.stripMargin

  private val AllSet = _table.split("\n").filter(_.trim.nonEmpty).toSet

  private val _partSplitter = "'"
  private val _splitterPtn = Pattern.compile(_partSplitter)

  def trySplit(n:String):Option[(String,String)] = {
    var r:Option[(String,String)] = None

    val appos = n.indexOf(_partSplitter)
    if (appos < 0) {
      val nl = n.toLowerCase
      var idx = 1
      while (r.isEmpty && idx < nl.length) {
        val p = nl.splitAt(idx)
        if (AllSet.contains(p._1) && AllSet.contains(p._2)) {
          val nsplit = n.splitAt(idx) // to keep case
          r = Option(nsplit._1, nsplit._2)
        }
        else
          idx = idx+1
      }
    }
    else if (appos > 0) {
      val p = _splitterPtn.split(n)
      if (p.length == 2) {
        if (AllSet.contains(p(0).toLowerCase) && AllSet.contains(p(1).toLowerCase)) {
          r = Option(p(0) -> p(1))
        }
      }
    } // else appos == 0
    r
  }

  def isPinyin(n:String, checkSplit:Boolean = false):Boolean = {
    if (AllSet.contains(n.toLowerCase)) true
    else {
      if (!checkSplit) false
      else {
        val split = trySplit(n)
        split.nonEmpty
      }
    }
  }
}
